
import numpy as np


def probability(s, beta):
    a, b, c, d, e, f = s

    return np.prod([
        (1/2)**a,
        ((1/3)*np.exp(-beta/2))**b,
        (1/3)**c,
        (np.exp(-beta/4))**d,
        ((1-np.exp(-beta/2))/3)**e,
        (1-np.exp(-beta/4))**f,
        2**(a+c+e)
    ])


def transition(beta):
    _P = np.array([
        1/2*np.exp(-beta/2),
    ])

    D = np.zeros((18, 18))

    adj = np.array([
        [0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0],
        [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1]
    ])

    for i in range(9):
        for j in range(9):
            D[i,j] = adj[i,j]*_P[i]*_P[j]
            D[i+9,j+9] = adj[i,j]*_P[i]*_P[j]

    print(D)

    return adj, D

transition(1)

